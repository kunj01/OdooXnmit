// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  projects      ProjectMember[]
  createdTasks  Task[]         @relation("TaskCreator")
  assignedTasks Task[]         @relation("TaskAssignee")
  comments      Comment[]
  notifications Notification[]
  projectDiscussions ProjectDiscussion[]
  taskDiscussions    TaskDiscussion[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  status      String @default("ACTIVE")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String

  // Relations
  members     ProjectMember[]
  tasks       Task[]
  discussions ProjectDiscussion[]

  @@map("projects")
}

model ProjectMember {
  id        String        @id @default(cuid())
  projectId String
  userId    String
  role      String   @default("MEMBER")
  joinedAt  DateTime      @default(now())

  // Relations
  project   Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@map("project_members")
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      String @default("TODO")
  priority    String   @default("MEDIUM")
  dueDate     DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  projectId   String
  createdById String
  assignedToId String?

  // Relations
  project     Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdBy   User       @relation("TaskCreator", fields: [createdById], references: [id])
  assignedTo  User?      @relation("TaskAssignee", fields: [assignedToId], references: [id])
  comments    Comment[]
  discussions TaskDiscussion[]

  @@map("tasks")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  taskId    String
  userId    String

  // Relations
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@map("comments")
}

model ProjectDiscussion {
  id        String   @id @default(cuid())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  projectId String
  userId    String

  // Relations
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@map("project_discussions")
}

model TaskDiscussion {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  taskId    String
  userId    String

  // Relations
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@map("task_discussions")
}

model Notification {
  id        String           @id @default(cuid())
  title     String
  message   String
  type      String
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
  userId    String

  // Relations
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// Note: Enums are replaced with string fields for SQLite compatibility
// Valid values:
// ProjectStatus: "ACTIVE", "COMPLETED", "ON_HOLD", "CANCELLED"
// ProjectRole: "OWNER", "ADMIN", "MEMBER"
// TaskStatus: "TODO", "IN_PROGRESS", "DONE", "CANCELLED"
// Priority: "LOW", "MEDIUM", "HIGH", "URGENT"
// NotificationType: "TASK_ASSIGNED", "TASK_UPDATED", "TASK_DUE_SOON", "TASK_OVERDUE", "PROJECT_INVITED", "COMMENT_ADDED", "DISCUSSION_ADDED"
